import React, { useEffect, useState } from "react";
import { db } from "../../firebaseConfig";
import { collection, getDocs, deleteDoc, doc } from "firebase/firestore";
import { Col, Row, Form, Button, Modal } from "react-bootstrap";

interface VehicleData {
  bikeTypeOrDoorCount: string;
  contactNumber: string;
  expirationDate: string;
  inspectionCost: number;
  lateFee: number;
  latestTaxPaymentDate: string;
  ownerData: string;
  prbCost: number;
  processingCost: number;
  province: string;
  registrationDate: string;
  registrationNumber: string;
  taxCost: number;
  totalCost: number;
  usernameData: string;
  selectedProvince: string;
  vehicleAge: {
    days: number;
    months: number;
    years: number;
  };
  vehicleType: string;
  weightOrCC: string;
  CCorWeight: string;
  carOrMotorcycleLabel: string;
  engineSize: string | null;
  selectedRadio: string | null;
  docId: string;
  registrationBookFilePath: string;
  licensePlateFilePath: string;
}

const FormAdmin: React.FC = () => {
  const [vehicles, setVehicles] = useState<VehicleData[]>([]);
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [selectedVehicle, setSelectedVehicle] = useState<VehicleData | null>(
    null
  );
  const [showModal, setShowModal] = useState<boolean>(false);

  useEffect(() => {
    const fetchVehicles = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "prbform"));
        const vehicleData = querySnapshot.docs.map((doc) => {
          const docData = doc.data() as VehicleData;
          return { ...docData, docId: doc.id };
        });
        setVehicles(vehicleData);
      } catch (error) {
        console.error("Error fetching vehicles:", error);
      }
    };

    fetchVehicles();
  }, []);

  const handleDelete = async (vehicle: VehicleData) => {
    try {
      if (
        window.confirm(
          `‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ${vehicle.registrationNumber} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
        )
      ) {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        const deleteFile = async (filePath: string) => {
          if (!filePath) return;

          const response = await fetch("http://localhost:3000/delete-file", {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              fileName: filePath.replace(/.*\/uploads\//, ""), // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ path ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads
            }),
          });

          if (!response.ok) {
            const error = await response.json();
            console.error(`Error deleting file: ${filePath}`, error);
            throw new Error(`Failed to delete file: ${filePath}`);
          }
          console.log(`File deleted successfully: ${filePath}`);
        };

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ
        await deleteFile(vehicle.registrationBookFilePath);
        await deleteFile(vehicle.licensePlateFilePath);

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
        const docRef = doc(db, "prbform", vehicle.docId);
        await deleteDoc(docRef);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô React State
        setVehicles(vehicles.filter((v) => v.docId !== vehicle.docId));

        alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (error) {
      console.error("Error deleting vehicle and files:", error);
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  };

  const handleViewDetails = (vehicle: VehicleData) => {
    setSelectedVehicle(vehicle);
    setShowModal(true);
  };

  const filteredVehicles = vehicles.filter(
    (vehicle) =>
      vehicle.registrationNumber
        .toLowerCase()
        .includes(searchTerm.toLowerCase()) ||
      vehicle.ownerData.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="form-container mx-auto mt-1">
      <h1 className="text-success">‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡∏ö.‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ñ</h1>
      <Form>
        <Row className="my-3">
          <Col>
            <Form.Control
              type="text"
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô, ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </Col>
        </Row>
        <Row className="mb-3">
          {filteredVehicles.map((vehicle, index) => (
            <Col
              xs={12}
              sm={12}
              md={6}
              lg={4}
              xl={4}
              key={index}
              className="mb-3"
            >
              <div className="card">
                <div className="card-body">
                  <h5 className="card-title text-success">
                    {vehicle.registrationNumber}
                  </h5>
                  <p className="card-text mt-4">
                    ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ: {vehicle.usernameData}
                  </p>
                  <p className="card-text">
                    {vehicle.selectedRadio}: {vehicle.ownerData}
                  </p>
                  <p className="card-text">
                    ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: {vehicle.contactNumber}
                  </p>
                  <p className="card-text">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: {vehicle.vehicleType}</p>
                  <p className="card-text">
                    ‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏≠‡∏≤‡∏¢‡∏∏: {vehicle.expirationDate}
                  </p>
                  <div className="d-flex justify-content-end">
                    <Button
                      variant="outline-danger"
                      onClick={() => handleDelete(vehicle)}
                    >
                      ‡∏•‡∏ö
                    </Button>
                    <Button
                      variant="success"
                      onClick={() => handleViewDetails(vehicle)}
                      className="mx-2"
                    >
                      ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    </Button>
                  </div>
                </div>
              </div>
            </Col>
          ))}
        </Row>
      </Form>

      {/* Modal for detailed view */}
      {selectedVehicle && (
        <Modal
          show={showModal}
          onHide={() => setShowModal(false)}
          size="lg"
          centered
        >
          <Modal.Header closeButton>
            <Modal.Title>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <p>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {selectedVehicle.registrationNumber}</p>
            <p>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: {selectedVehicle.province}</p>
            <p>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ: {selectedVehicle.usernameData}</p>
            <p>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: {selectedVehicle.contactNumber}</p>
            <p>
              {selectedVehicle.selectedRadio} : {selectedVehicle.ownerData}
            </p>
            <hr></hr>
            <p className="mt-4">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ: {selectedVehicle.vehicleType}</p>
            <p>
              {selectedVehicle.carOrMotorcycleLabel}:{" "}
              {selectedVehicle.bikeTypeOrDoorCount}
            </p>
            <p>
              {selectedVehicle.CCorWeight}: {selectedVehicle.engineSize}
            </p>
            <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: {selectedVehicle.registrationDate}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏≠‡∏≤‡∏¢‡∏∏ : {selectedVehicle.expirationDate}</p>
            <p>‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {selectedVehicle.latestTaxPaymentDate}</p>
            <p>
              ‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏ñ:
              {selectedVehicle.vehicleAge.years > 0 &&
                `${selectedVehicle.vehicleAge.years} ‡∏õ‡∏µ `}{" "}
              {selectedVehicle.vehicleAge.months > 0 &&
                `${selectedVehicle.vehicleAge.months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô `}{" "}
              {selectedVehicle.vehicleAge.days > 0 &&
                `${selectedVehicle.vehicleAge.days} ‡∏ß‡∏±‡∏ô`}
            </p>
            <hr></hr>
            <p className="mt-4">‚úÖ ‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡∏ö. üöò: {selectedVehicle.prbCost} ‡∏ö‡∏≤‡∏ó</p>
            <p>‚úÖ ‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ: {selectedVehicle.taxCost} ‡∏ö‡∏≤‡∏ó</p>
            <p>‚ûï ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤: {selectedVehicle.lateFee} ‡∏ö‡∏≤‡∏ó</p>
            <p>
              ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏†‡∏≤‡∏û‡∏£‡∏ñ‡πÄ‡∏≠‡∏Å‡∏ä‡∏ô üõ£Ô∏è: {selectedVehicle.inspectionCost} ‡∏ö‡∏≤‡∏ó
            </p>
            <p>
              ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‚ôé: {selectedVehicle.processingCost} ‡∏ö‡∏≤‡∏ó
            </p>
            <p>‚úÖ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {selectedVehicle.totalCost} ‡∏ö‡∏≤‡∏ó</p>
          </Modal.Body>
          <Modal.Footer>
            <Button
              variant="success"
              onClick={() =>
                window.open(selectedVehicle.registrationBookFilePath, "_blank")
              }
            >
              ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏†‡∏≤‡∏û‡πÄ‡∏•‡πà‡∏°‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
            </Button>
            <Button
              variant="success"
              onClick={() =>
                window.open(selectedVehicle.licensePlateFilePath, "_blank")
              }
            >
              ‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡πà‡∏ô‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
            </Button>
          </Modal.Footer>
        </Modal>
      )}
    </div>
  );
};

export default FormAdmin;
