//resultDelivery.tsx
import React from "react";
import { Button, Row, Col, Form } from "react-bootstrap";
import { calculateDelivery } from "../../data/calculateDelivery";
// import { db } from "../../../firebaseConfig";
// import { collection, addDoc } from "firebase/firestore";
// import AlertModal from "../textFillComponent/alertModal";

interface ResultDeliveryProps {
  deliveryType: string;
  senderInfo: {
    username: string;
    contactNumber: string;
    ownerData: string;
    dormitory: string;
    soi: string;
    houseNo: string;
    villageNo: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
    selectedFilePath: string;
  };
  receiverInfo: {
    username: string;
    contactNumber: string;
    dormitory: string;
    soi: string;
    houseNo: string;
    villageNo: string;
    subDistrict: string;
    district: string;
    province: string;
    postalCode: string;
  };
  vehicleInfo?: {
    carType: string;
    ccSize: number;
    registrationBookFilePath?: string | null;
    idCardFilePath?: string | null;
  };
  onBack: () => void;
}

const ResultDelivery: React.FC<ResultDeliveryProps> = ({
  deliveryType,
  senderInfo,
  receiverInfo,
  vehicleInfo,
  onBack,
}) => {
  const deliveryCost =
    vehicleInfo && deliveryType === "‡∏™‡πà‡∏á‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô"
      ? calculateDelivery(receiverInfo.province, vehicleInfo.ccSize)
      : null;

  //   const [showModal, setShowModal] = useState(false);
  //   const [modalMessage, setModalMessage] = useState("");
  //   const [success, setSuccess] = useState(false);

  // //   const handleConfirm = async () => {
  // //     try {
  // //       const formData = new FormData();
  // //       if (selectedRegistrationBookFile) {
  // //         formData.append("registrationBookFile", selectedRegistrationBookFile);
  // //       }
  // //       if (selectedLicenseFile) {
  // //         formData.append("licenseFile", selectedLicenseFile);
  // //       }

  // //       const response = await fetch("http://localhost:3000/upload-multiple", {
  // //         method: "POST",
  // //         body: formData,
  // //       });

  // //       if (!response.ok) {
  // //         const errorData = await response.json();
  // //         console.error("Upload error details:", errorData);
  // //         throw new Error("Failed to upload files to server");
  // //       }

  // //       const responseData = await response.json();

  // //       // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ responseData ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  // //       if (!responseData.registrationBookFile || !responseData.licenseFile) {
  // //         throw new Error("Response data missing required files");
  // //       }

  // //       const { registrationBookFile, licenseFile } = responseData;

  // //       console.log("Files uploaded successfully:", {
  // //         registrationBookFile,
  // //         licenseFile,
  // //       });

  // //       const data = {
  // //         ownerData: ownerData || "",
  // //         usernameData: usernameData || "",
  // //         selectedProvince: selectedProvince || "",
  // //         engineSize: engineSize || "0",
  // //         contactNumber: contactNumber || "",
  // //         registrationNumber: registrationNumber || "",
  // //         registrationDate: registrationDate ? registrationDate : new Date(),
  // //         expirationDate: expirationDate ? expirationDate : new Date(),
  // //         latestTaxPaymentDate: latestTaxPaymentDate
  // //           ? latestTaxPaymentDate
  // //           : new Date(),
  // //         bikeTypeOrDoorCount: bikeTypeOrDoorCount || "",
  // //         selectedCarType: selectedCarType || "",
  // //         totalCost: totalCost || 0,
  // //         prbCost: prbCost || 0,
  // //         taxCost: taxCost || 0,
  // //         lateFee: lateFee || 0,
  // //         inspectionCost: inspectionCost || 0,
  // //         processingCost: processingCost || 0,
  // //         carAge: carAge || { years: 0, months: 0, days: 0 },
  // //         CCorWeight: CCorWeight || "",
  // //         carOrMotorcycleLabel: carOrMotorcycleLabel || "",
  // //         selectedRadio: selectedRadio || "",
  // //       };

  // //       const updatedData = {
  // //         usernameData: data.usernameData,
  // //         province: data.selectedProvince,
  // //         vehicleType: data.selectedCarType,
  // //         bikeTypeOrDoorCount: data.bikeTypeOrDoorCount,
  // //         weightOrCC: data.CCorWeight,
  // //         engineSize: data.engineSize,
  // //         registrationDate: formatDate(data.registrationDate),
  // //         expirationDate: formatDate(data.expirationDate), // formatDate only to show on UI, not here
  // //         latestTaxPaymentDate: formatDate(data.latestTaxPaymentDate),
  // //         vehicleAge: data.carAge,
  // //         contactNumber: data.contactNumber,
  // //         ownerData: data.ownerData,
  // //         prbCost: data.prbCost,
  // //         registrationNumber: data.registrationNumber,
  // //         taxCost: data.taxCost,
  // //         lateFee: data.lateFee,
  // //         inspectionCost: data.inspectionCost,
  // //         processingCost: data.processingCost,
  // //         totalCost: data.totalCost,
  // //         CCorWeight: data.CCorWeight,
  // //         carOrMotorcycleLabel: data.carOrMotorcycleLabel,
  // //         selectedRadio: data.selectedRadio,
  // //         registrationBookFilePath: registrationBookFile.filePath,
  // //         registrationBookStoredFileName: registrationBookFile.storedFileName,
  // //         licensePlateFilePath: licenseFile.filePath,
  // //         licensePlateStoredFileName: licenseFile.storedFileName,
  // //       };

  // //       const docRef = await addDoc(collection(db, "delivery"), updatedData);
  // //       console.log("Document written with ID: ", docRef.id);

  // //       setModalMessage(
  // //         `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‚úÖ\n‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ üôè‚ù§Ô∏è \nüì¢‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß \n‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° SMS ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô \n‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ø‡∏û.‡∏£.‡∏ö.‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏°‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∞‚ù§Ô∏è`
  // //       );
  // //       setSuccess(true);
  // //     } catch (error) {
  // //       console.error("Error uploading file or saving data:", error);
  // //       setModalMessage("‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  // //       setSuccess(false);
  // //     } finally {
  // //       setShowModal(true);
  // //     }
  // //   };

  //   const handleOpenModal = () => {
  //     setModalMessage("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?");
  //     setSuccess(false);
  //     setShowModal(true);
  //   };

  return (
    <div>
      <Form>
        <Row className="mb-4">
          {/* ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á */}
          <Col md={6}>
            <h4 className="text-success">‚úÖ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á</h4>
            <ul className="list-unstyled">
              <li className="mb-1">
                <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> {senderInfo.username}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> {senderInfo.contactNumber}
              </li>
              <li className="mb-1">
                <strong>
                  {senderInfo.ownerData.includes("@")
                    ? "‡∏û‡∏≤‡∏™‡∏õ‡∏≠‡∏£‡πå‡∏ï"
                    : "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"}
                  :
                </strong>{" "}
                {senderInfo.ownerData}
              </li>
              <li className="mb-1">
                <strong>‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:</strong> {senderInfo.houseNo}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏°‡∏π‡πà:</strong> {senderInfo.villageNo}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏≠‡∏û‡∏±‡∏Å:</strong> {senderInfo.dormitory}
              </li>
              <li className="mb-1">
                <strong>‡∏ã‡∏≠‡∏¢:</strong> {senderInfo.soi}
              </li>
              <li className="mb-1">
                <strong>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á:</strong> {senderInfo.subDistrict}
              </li>
              <li className="mb-1">
                <strong>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï:</strong> {senderInfo.district}
              </li>
              <li className="mb-1">
                <strong>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</strong> {senderInfo.province}
              </li>
              <li className="mb-1">
                <strong>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:</strong> {senderInfo.postalCode}
              </li>
            </ul>
          </Col>

          {/* ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö */}
          <Col md={6}>
            <h4 className="text-success">‚úÖ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</h4>
            <ul className="list-unstyled">
              <li className="mb-1">
                <strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</strong> {receiverInfo.username}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</strong> {receiverInfo.contactNumber}
              </li>
              <li className="mb-1">
                <strong>‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:</strong> {receiverInfo.houseNo}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏°‡∏π‡πà:</strong> {receiverInfo.villageNo}
              </li>
              <li className="mb-1">
                <strong>‡∏´‡∏≠‡∏û‡∏±‡∏Å:</strong> {receiverInfo.dormitory}
              </li>
              <li className="mb-1">
                <strong>‡∏ã‡∏≠‡∏¢:</strong> {receiverInfo.soi}
              </li>
              <li className="mb-1">
                <strong>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á:</strong> {receiverInfo.subDistrict}
              </li>
              <li className="mb-1">
                <strong>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï:</strong> {receiverInfo.district}
              </li>
              <li className="mb-1">
                <strong>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:</strong> {receiverInfo.province}
              </li>
              <li className="mb-1">
                <strong>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:</strong> {receiverInfo.postalCode}
              </li>
            </ul>
          </Col>
        </Row>

        {deliveryType === "‡∏™‡πà‡∏á‡∏£‡∏ñ‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô" && vehicleInfo && (
          <Row className="mb-4">
            <Col>
              <h4 className="text-success">üèçÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á</h4>
              <ul className="list-unstyled">
                <li className="mb-1">
                  <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏¢‡∏ô‡∏ï‡πå:</strong> {vehicleInfo.carType}
                </li>
                <li className="mb-1">
                  <strong>‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ CC:</strong> {vehicleInfo.ccSize}
                </li>
                <li className="mb-1">
                  <strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏ñ:</strong>{" "}
                  {`${deliveryCost?.toLocaleString()} ‡∏ö‡∏≤‡∏ó`}
                </li>
              </ul>
            </Col>
          </Row>
        )}

        <footer>
          <Row className="mb-2 ">
            <Col className="form-button-container">
              <Button
                variant="outline-success"
                onClick={onBack}
                className="form-button mx-3"
              >
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </Button>
              <Button className="form-button" variant="success">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</Button>
            </Col>
          </Row>
        </footer>
        {/* <AlertModal
          show={showModal}
          onBack={() => {
            setShowModal(false);
          }}
          onSuccess={() => {
            window.location.reload();
            onBack();
            setShowModal(false);
          }}
          onConfirm={
            success
              ? () => {
                  onBack();
                  setShowModal(false);
                }
              : (handleConfirm)
          }
          message={modalMessage}
          success={success}
        /> */}
      </Form>
    </div>
  );
};

export default ResultDelivery;
