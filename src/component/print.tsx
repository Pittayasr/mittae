// print.tsx
import React, { useState } from "react";
import {
  calculatePrice,
  calculateFileColorPercentage,
} from "../data/calculatePrint";
import { Col, Row, Form, Button, Alert, Modal, Spinner } from "react-bootstrap";
import TextInput from "./textInput";
import TextSelect from "./textSelect";
import FileInput from "./fileInput";
import AlertModal from "./alertModal";
import { db } from "../../firebaseConfig";
import { collection, addDoc } from "firebase/firestore";
import "@fortawesome/fontawesome-free/css/all.min.css";

const Print: React.FC = () => {
  const [selectTypePrint, setSelectTypePrint] = useState<string | null>(null);
  const [pagePrint, setPagePrint] = useState<string>(""); // Page count as string
  const [copiesSetPrint, setCopiesSetPrint] = useState<string>(""); // Copies count as string
  const [selectedFile, setSelectedFile] = useState<File | null>(null); // Selected file
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [totalPrice, setTotalPrice] = useState<number>(0);
  const [textColorPercentage, setTextColorPercentage] = useState<number | null>(
    null
  );

  const [isCalculating, setIsCalculating] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState("");
  const [success, setSuccess] = useState(false);

  const handleOpenModal = () => {
    setModalMessage(
      `‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: ${totalPrice} ‡∏ö‡∏≤‡∏ó \n‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: ${textColorPercentage} %\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?`
    );
    setShowModal(true);
  };

  // useEffect(() => {
  //   const fetchPrice = async () => {
  //     // Only proceed if valid data exists

  //   };

  //   fetchPrice();
  // }, [selectedFile, selectTypePrint, pagePrint, copiesSetPrint]);

  // Helper function to check if a value is a valid number
  const isValidNumber = (value: string) => {
    const parsedValue = parseInt(value, 10);
    return !isNaN(parsedValue) && parsedValue > 0;
  };

  const handleConfirm = async () => {
    if (
      !selectTypePrint ||
      !isValidNumber(pagePrint) ||
      !isValidNumber(copiesSetPrint) ||
      !selectedFile
    ) {
      setIsSubmitted(true);
      return;
    }

    setIsCalculating(true);

    try {
      const price = await calculatePrice(
        selectTypePrint,
        pagePrint,
        copiesSetPrint,
        selectedFile
      );
      setTotalPrice(price);

      const colorPercentage = await calculateFileColorPercentage(selectedFile);
      setTextColorPercentage(colorPercentage);

      handleOpenModal(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô
    } catch (error) {
      console.error("Error during submission: ", error);
      setModalMessage("‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      setSuccess(false);
      setShowModal(true); // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    } finally {
      setIsCalculating(false); // Hide loader
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleSubmitData = async () => {
    try {
      const data = {
        typePrint: selectTypePrint,
        numPages: pagePrint,
        numSetPrint: copiesSetPrint,
        fileName: selectedFile?.name ?? "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
        price: totalPrice,
      };

      const docRef = await addDoc(collection(db, "print"), data);
      console.log("Document written with ID: ", docRef.id);

      setModalMessage(
        `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‚úÖ\n‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ üôè‚ù§Ô∏è`
      );
      setSuccess(true);
      setShowModal(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    } catch (error) {
      console.error("Error during submission: ", error);
      setModalMessage("‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      setSuccess(false);
      setShowModal(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    }
  };

  const onBack = () => {
    setSelectTypePrint(null);
    setPagePrint("");
    setCopiesSetPrint("");
    setSelectedFile(null);
    setIsSubmitted(false);
    setTotalPrice(0);
    setTextColorPercentage(null);
    setShowModal(false);
  };

  return (
    <div className="form-container mx-auto mt-1">
      <Form onSubmit={handleConfirm}>
        <h2 className="text-center mb-4 text-success">‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h2>

        {/* Alert */}
        <Alert variant="success" className="d-flex align-items-center mb-4">
          <i className="fas fa-exclamation-triangle me-2"></i>
          <span>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á</span>
        </Alert>

        {/* Instructions */}
        <ul className="list-unstyled mb-4">
          <li>
            <strong>1. ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ 1-4 ‡πÅ‡∏ú‡πà‡∏ô: ‡πÅ‡∏ú‡πà‡∏ô‡∏•‡∏∞ 5 ‡∏ö‡∏≤‡∏ó</strong>
          </li>
          <li>
            <strong>2. ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 5 ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ: ‡πÅ‡∏ú‡πà‡∏ô‡∏•‡∏∞ 1 ‡∏ö‡∏≤‡∏ó</strong>
          </li>
          <li>
            <strong>
              3. ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏™‡∏µ: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏µ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡πà‡∏ô‡∏•‡∏∞ 5 ‡∏ö‡∏≤‡∏ó
            </strong>
          </li>
          <li>
            <strong>4. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</strong>
          </li>
          <li>
            <strong>5. ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå: PDF WORD JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</strong>
          </li>
          <li>
            <strong>6. ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</strong>
          </li>
        </ul>

        {/* Form Fields */}
        <Row className="mb-3">
          <Col xs={6} md={6} className="mb-3">
            <TextSelect
              label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô"
              id="selectTypePrint"
              options={["‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥", "‡∏™‡∏µ"]}
              placeholder="‡∏™‡∏µ/‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥"
              value={selectTypePrint || ""}
              onChange={(value) => {
                console.log("Selected Type Print:", value);
                setSelectTypePrint(value);
              }}
              required
              isInvalid={isSubmitted && !selectTypePrint}
              alertText="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô"
            />
          </Col>

          <Col xs={6} md={6} className="mb-3">
            <TextInput
              label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"
              id="pagePrint"
              type="numeric"
              inputMode="numeric"
              value={pagePrint}
              onChange={(e) => setPagePrint(e.target.value)}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤"
              required
              isInvalid={isSubmitted && !isValidNumber(pagePrint)}
              alertText="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            />
          </Col>

          <Col xl={6} lg={12} className="mb-3">
            <TextInput
              label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô"
              id="copiesSetPrint"
              type="numeric"
              inputMode="numeric"
              value={copiesSetPrint}
              onChange={(e) => setCopiesSetPrint(e.target.value)}
              placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∏‡∏î"
              required
              isInvalid={isSubmitted && !isValidNumber(copiesSetPrint)}
              alertText="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
            />
          </Col>
          <Col xl={6} lg={12} className="mb-3">
            <FileInput onFileSelect={(file) => setSelectedFile(file)} />
          </Col>
        </Row>

        {/* Display Price */}
        <Row>
          <Col className="text-center">
            <h4>‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: {totalPrice} ‡∏ö‡∏≤‡∏ó</h4>
            {<p>‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {textColorPercentage}%</p>}
          </Col>
        </Row>

        <hr className="mb-4" />

        <footer className="d-flex justify-content-center">
          <Button variant="success" onClick={handleConfirm} className="w-50">
            ‡∏™‡πà‡∏á
          </Button>
        </footer>

        {/* Loader Modal */}
        <Modal show={isCalculating} centered>
          <Modal.Body className="text-center">
            <Spinner animation="border" role="status" className="mb-3" />
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</p>
          </Modal.Body>
        </Modal>

        <AlertModal
          show={showModal}
          onBack={() => {
            setShowModal(false);
          }}
          onSuccess={() => {
            window.location.reload();
            onBack();
            setShowModal(false);
          }}
          onConfirm={
            success
              ? () => {
                  onBack();
                  setShowModal(false);
                }
              : handleSubmitData
          }
          message={modalMessage}
          success={success}
        />
      </Form>
    </div>
  );
};

export default Print;
